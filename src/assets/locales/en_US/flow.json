{
	"common": {
		"input": "Input",
		"output": "Output",
		"systemInput": "System Input",
		"systemOutput": "System Output",
		"customSystemInput": "Custom System Input",
		"paramsInput": "Params Input",
		"testByStep": "Step Debug",
		"testFlow": "Test Run",
		"hours": "Hours",
		"minutes": "Minutes",
		"seconds": "Seconds",
		"manageRights": "Access",
		"environment": "Env",
		"environmentDesc": "Environment variables are saved with the process",
		"versionList": "Version List",
		"publishVersion": "Publish Version",
		"publishVersionDesc": "Memory won't restore with version rollback.",
		"publishVersionTips": "Restore process version to \"${version}\"?",
		"draftList": "Draft List",
		"draftBox": "Draft Box",
		"draftBoxDesc": "A single workflow can save up to 50 drafts, older drafts will be overwritten.",
		"draftUpdateAt": "Updated at ${timeStr}",
		"draftModalTitle": "Fill Draft Info",
		"draftName": "Draft Name",
		"draftDesc": "Draft Description",
		"agentPublishTips": "Publishing internally will auto-initiate approval. Once approved, all employees can use it.",
		"save": "Save",
		"reset": "Reset",
		"search": "Search",
		"recentContact": "Recent Contact",
		"byOrganization": "By Organization",
		"selectAll": "Select All",
		"selectPeopleCount": "${num} People Selected",
		"creator": "Creator",
		"management": "Management",
		"edit": "Edit",
		"view": "View",
		"remove": "Remove",
		"cancel": "Cancel",
		"all": "All",
		"any": "Any",
		"agent": "AI Assistant",
		"flow": "Flow",
		"tools": "Tools",
		"addTools": "Add Tools",
		"base": "Base",
		"operation": "Operation",
		"bigModel": "Big Model",
		"dataHandler": "Data Handler",
		"mode": "Mode",
		"loadDraftTips": "Load latest draft?",
		"yes": "Yes",
		"no": "No",
		"isDraftTips": "Currently in draft mode",
		"IKnowIt": "Got it",
		"searchKeywords": "Search Keywords",
		"searchKeywordsPlaceholder": "Match in specified knowledge base using keywords,",
		"knowledgeData": "Knowledge Data",
		"addKnowledgeData": "Add Knowledge Data",
		"maxReturnCount": "Max Return Count",
		"maxReturnCountDesc": "Max number of paragraphs returned from the knowledge base. More paragraphs with higher values.",
		"minMatchRatio": "Min Match Ratio",
		"minMatchRatioDesc": "Select paragraphs based on match ratio to return to the model. Content below the set match ratio will not be recalled.",
		"recommend": "Recommend",
		"vectoringText": "Vectorizing",
		"vectoredText": "Vectorization Complete",
		"vectorFailText": "Vectorization Failed",
		"vectoringDesc": "Converting data to vector form for standardized input for model learning and data processing.",
		"vectoredDesc": "Vectorized, ready for use",
		"vectorFailDesc": "Data conversion failed, click to retry",
		"firstTimeVectorDesc": "The \"${name}\" you selected has not been vectorized yet. Confirm to start the vectorization process asynchronously. During conversion, the knowledge base data can't be used in AI assistant replies, but configuration operations are unaffected.",
		"retryVectorDesc": "The \"${name}\" you selected has been vectorized before. Confirm to restart the vectorization process asynchronously. During conversion, the knowledge base data can't be used in AI assistant replies, but configuration operations are unaffected.",
		"addKnowledgeDatabase": "Add Knowledge Base",
		"tips": "Tips",
		"confirmAndNext": "Confirm and Continue",
		"teamshareKnowledgeDatabase": "Teamshare Knowledge Base",
		"userKnowledgeDatabase": "User-built Knowledge Base",
		"userKnowledgeDatabasePlaceholder": "Please select user-built knowledge base",
		"knowledgeDatabase": "Vector Knowledge Base",
		"reVector": "Re-vector",
		"retry": "Retry",
		"add": "Add",
		"sort": "Sort",
		"recentlyVisit": "Recently Visited",
		"onlyShowOfficial": "Show Official Tools Only",
		"delete": "Delete",
		"toolsSettings": "Tools Settings",
		"selectDatabase": "Select Knowledge Base",
		"metadata": "Metadata",
		"addMetadata": "Add Metadata",
		"metadataMatch": "Metadata Match",
		"searchConditions": "Search Conditions",
		"meet": "Meet",
		"conditions": "Conditions",
		"allowExpressionPlaceholder": "Support adding variables with \"@\"",
		"model": "Model",
		"searchModel": "Search Model",
		"temperature": "Temperature",
		"temperatureDesc": "Temperature controls randomness. Lower temperature results in less random completions. As temperature approaches zero, the model becomes deterministic and repetitive. Higher temperature results in more random completions.",
		"autoMemory": "Auto Load Memory",
		"autoMemoryDesc": "When enabled, previous conversation content is loaded as context into the node",
		"maxRecord": "Max Memory Count",
		"maxRecordDesc": "The node remembers up to n messages, where n is the max memory count you set",
		"prompt": "Prompt",
		"equals": "Equals",
		"notEquals": "Not Equals",
		"contains": "Contains",
		"notContains": "Not Contains",
		"empty": "Empty",
		"notEmpty": "Not Empty",
		"earlier": "Earlier",
		"later": "Later",
		"greaterThen": "Greater Than",
		"lessThen": "Less Than",
		"addConditions": "Add Conditions",
		"key": "Data Key",
		"value": "Data Value",
		"scope": "Scope",
		"currentTopic": "Current Topic",
		"currentUser": "Current User",
		"currentAgent": "Current Assistant",
		"agentScopeDesc": "Assistant level: Store dynamic tokens for AI assistant calling external APIs",
		"userScopeDesc": "User level: Store personalized information like 'My name is XX, I am XX years old'",
		"topicScopeDesc": "Topic level: Store file links for analysis under this topic, can be passed through the main flow to tools",
		"variableName": "Variable Name",
		"showName": "Display Name",
		"variableType": "Variable Type",
		"variableDesc": "Variable Description",
		"variableValue": "Variable Value",
		"encryption": "Encryption",
		"required": "Required",
		"addArguments": "Add Arguments",
		"selectFiles": "Select File with Data Table",
		"selectSheets": "Select Data Table with Records",
		"invalidColumn": "Field Deleted",
		"setValue": "Set Value",
		"inputFileName": "Enter Multidimensional Table Name",
		"driveType": "Cloud Drive Type",
		"privateDrive": "Private Cloud Drive",
		"enterpriseDrive": "Enterprise Cloud Drive",
		"fileList": "File List",
		"setRecordValue": "Set Field Value",
		"setFilterConditions": "Set Filter Conditions",
		"selectRecord": "Select Record",
		"pointedRecord": "Pointed Record",
		"allRecord": "All Records",
		"fillContent": "Fill Info",
		"triggerType": "Trigger Type",
		"conversationId": "Conversation ID",
		"conversationIdDesc": "Test run memory exists in this conversation",
		"username": "User Name",
		"sendTime": "Send Time",
		"messageType": "Message Type",
		"messageContent": "Message Content",
		"text": "Text",
		"name": "Name",
		"desc": "Description",
		"createAt": "Creation Time",
		"updateAt": "Update Time",
		"enable": "Enable",
		"businessId": "Business ID",
		"businessIdDesc": "If \"Business ID\" is specified, update operation will prioritize it",
		"autoBusinessId": "Auto-generate Business ID",
		"businessIdPlaceholder": "Enter Business ID",
		"success": "Success",
		"updateSuccess": "Update Successful",
		"groupChat": "Group Chat",
		"rollbackDesc": "Restore process version to \"${versionName}\"?",
		"confirm": "Confirm",
		"rollbackSuccess": "Switched to ${versionName}",
		"emptyVersionTitle": "No Versions Published",
		"emptyVersionDesc": "Restore latest records anytime",
		"unknownUser": "Unknown User",
		"deleteSuccess": "Deleted Successfully",
		"emptyDraftTitle": "No Drafts",
		"emptyDraftDesc": "A single workflow can save up to 50 drafts",
		"currentDraft": "Current Draft",
		"updateDraft": "Update Draft Info",
		"deleteDraft": "Delete Current Draft",
		"confirmDelete": "Confirm Deletion?",
		"pleaseSelect": "Please Select",
		"pleaseInput": "Please Input",
		"usernamePlaceholder": "Enter User Name",
		"sendTimePlaceholder": "Select Send Time",
		"messageTypePlaceholder": "Select Message Type",
		"messageContentPlaceholder": "Enter Message Content",
		"openTimePlaceholder": "Select Open Time",
		"openTime": "Open Time",
		"updateDraftSuccess": "Draft Updated Successfully",
		"saveDraftSuccess": "Draft Saved Successfully",
		"draft": "Draft",
		"saveDraft": "Save Draft",
		"emptyTools": "No Tools Available",
		"goToTargetTools": "Go to Corresponding Tool for Editing",
		"inputArguments": "Input Arguments",
		"outputArguments": "Output Arguments",
		"invalidTools": "No Permission or Invalid Tool",
		"invalidKnowledgeDatabase": "No Permission or Invalid Knowledge Base",
		"asyncCall": "Asynchronous Call",
		"asyncCallDesc": "When enabled, the tool call won't block subsequent process execution even if not completed",
		"radio": "Radio",
		"number": "Number",
		"multiple": "Multiple Choice",
		"date": "Date",
		"checkbox": "Checkbox",
		"link": "Hyperlink",
		"attachment": "Attachment",
		"member": "Member",
		"todoStatus": "To-do Status",
		"todoFinishedAt": "To-do Completion Time",
		"lookup": "Lookup Reference",
		"quoteRelation": "Unidirectional Relation",
		"mutualRelation": "Bidirectional Relation",
		"rowId": "Row Record ID",
		"formula": "Formula",
		"today": "Today",
		"tomorrow": "Tomorrow",
		"yesterday": "Yesterday",
		"thisWeek": "This Week",
		"lastWeek": "Last Week",
		"thisMonth": "This Month",
		"lastMonth": "Last Month",
		"pastSevenDay": "Past 7 Days",
		"nextSevenDay": "Next 7 Days",
		"pastThirtyDay": "Past 30 Days",
		"nextThirtyDay": "Next 30 Days",
		"designDay": "Designated Date",
		"computing": "Computing...",
		"if": "If",
		"else": "Else",
		"time": "Time",
		"llmArgumentsInput": "Big Model Arguments Input",
		"argumentsInput": "Arguments Input",
		"fileUrl": "File URL",
		"file": "File",
		"fileUrlPlaceholder": "Enter File URL,",
		"fileName": "File Name",
		"fileNamePlaceholder": "Enter File Name,",
		"imageUrl": "Image URL",
		"imageUrlPlaceholder": "Enter Image URL,",
		"imageDesc": "Description Text",
		"imageDescPlaceholder": "Enter Description Text,",
		"code": "Code",
		"width": "Width",
		"height": "Height",
		"toolsDesc": "Tools Description",
		"toolsInput": "Tools Input",
		"toolsOutput": "Tools Output",
		"searchFiles": "Search Files",
		"inputArgs": "Input Arguments",
		"referenceArgsSettings": "Reference Arguments",
		"environmentArgsSettings": "Environment Arguments",
		"organizationChangeTips": "Organization has changed and will return to AI Assistant page",
		"autoSaving": "Auto saving",
		"savedText": "saved",
		"workflow": "Workflow",
		"toolset": "Toolset",
		"enabled": "Enabled",
		"disabled": "Disabled",
		"baned": "Baned",
		"comeToTheEnd": "Have come to the end",
		"neverCreate": "No ${name} have been created yet",
		"queryNone": "No ${name} can be queried",
		"testSuccess": "Test success",
		"testFail": "Test failure",
		"flowDisable": "Disable",
		"checkToEnable": "Whether to enable ?",
		"checkToBan": "Whether to disable ?",
		"confirmToUpdateVersion": "Are you sure to update to the latest version? Update dependent nodes in a timely manner",
		"dingTalk": "DingTalk",
		"feiShu": "FeiShu",
		"enterpriseWeChat": "Enterprise WeChat",
		"dingTalkInnerApp": "DingTalk Internal Application",
		"feiShuInnerApp": "FeiShu Internal Application",
		"enterpriseWeChatInnerApp": "Tencent Internal Application",
		"thirdPartyPlatform": "Third-party Platform",
		"thirdPartyPlatformDesc": "Before publishing to a third-party platform, please complete the platform configuration first, then click 'Publish'.",
		"settings": "Settings",
		"copySuccess": "Copied successfully",
		"nextStep": "Next Step",
		"dingTalkSettings": "DingTalk Settings",
		"setDingTalkInfo": "Configure DingTalk App Information",
		"goTo": "Go to",
		"dingTalkPlatform": "DingTalk Open Platform",
		"get": "Get",
		"dingTalkRightTitle": "Create DingTalk Bot and Enable Permissions",
		"dingTalkRightDesc": "Configure callback URL",
		"publishSuccess": "Configuration complete",
		"tryToChatWithAI": "Try to chat with AI Assistant",
		"inputClientIdPlaceholder": "Enter DingTalk App Client ID",
		"inputClientSecretPlaceholder": "Enter DingTalk App Client Secret",
		"intoDingTalkInfo": "1. Navigate to the DingTalk app, click 'Add Application Capability', and select 'Add Bot'.",
		"addAgentInfo": "2. After adding, go to 'Bot Configuration' and fill in the 'Message Receive Mode' and 'Message Receive URL' below.",
		"dingTalkPowerInfo": "3. In the DingTalk app, find 'Permission Management' and enable the permissions: ",
		"dingTalkAndInfo": "and",
		"messageReceiveMode": "Message Receive Mode",
		"httpMode": "HTTP Mode",
		"messageReceiveAddr": "Message Receive URL",
		"copy": "Copy",
		"dingTalkSettingsSuccess": "DingTalk configuration completed",
		"backToPublishPage": "Back to Publish Page",
		"addPlatform": "Add Publishing Platform",
		"selectPlatform": "Select Third-party Platform",
		"willOnline": "Coming Soon",
		"enterpriseApp": "Enterprise Internal Application",
		"identification": "Identifier",
		"identificationPlaceholder": "Enter an identifier to distinguish multiple data under the same platform",
		"invalidModel": "Model has been disabled or deleted",
		"feiShuSettings": "FeiShu Settings",
		"setFeiShuInfo": "Configure FeiShu App Information",
		"feiShuPlatform": "FeiShu Open Platform",
		"feiShuRightTitle": "Create FeiShu Bot and Enable Permissions",
		"feiShuRightDesc": "Configure callback URL",
		"intoFeiShuInfo": "Navigate to the FeiShu app, click 'Add Application Capability', and select 'Add Bot'",
		"addFeiShuAgentInfo": "After adding, go to 'Events and Callbacks' and enter the 'Request URL' below into the 'Subscription Method'",
		"feiShuSteps1": "1. Navigate to the FeiShu app, click 'Add Application Capability', and select 'Add Bot'",
		"feiShuSteps2": "2. After adding, go to 'Events and Callbacks' and enter the 'Request URL' below into the 'Subscription Method'",
		"feiShuSteps3": "3. In 'Events and Callbacks', add/enable the event 'Receive Messages 2.0'",
		"feiShuSteps4": "4. In the app, find 'Permission Management' and enable the following permissions",
		"readUserMessage": "Read user messages sent to the bot in private chats",
		"receiveGroupMessage": "Receive group chat @bot message events",
		"sendMessage": "Get and send private chat and group messages",
		"getContactInfo": "Get basic contact information",
		"getUserInfo": "Get basic user information",
		"getResources": "Get and upload image or file resources",
		"inputFeiShuAppIdPlaceholder": "Enter FeiShu App ID",
		"inputFeiShuAppSecretPlaceholder": "Enter FeiShu App Secret",
		"feiShuSettingsSuccess": "FeiShu application configuration completed",
		"requestAddr": "Request URL",
		"savedSuccess": "Saved Successfully",
		"historyMessages": "History Messages",
		"role": "Role",
		"content": "Content",
		"documentParsing": "Document Parsing",
		"rootNode": "root node",
		"allContent": "All Content",
		"files": "Files",
		"fileExtension": "File Extension",
		"owner": "Owner",
		"admin": "Admin",
		"read": "Read",
		"flowAssistant": "Flow Assistant",
		"enterpriseWeChatSettings": "Enterprise WeChat Settings",
		"setEnterpriseWeChatInfo": "Configure Enterprise WeChat App Information",
		"enterpriseWeChatPlatform": "Enterprise WeChat Management Backend",
		"enterpriseWeChatRightTitle": "Configure API Address and IP",
		"enterpriseWeChatRightDesc": "Configure Receiving Address and Trusted IP",
		"intoEnterpriseWeChatInfo": "1. Enter the Enterprise WeChat application, find 'Receive Messages' and click 'Set API Receiving'",
		"addEnterpriseWeChatAgentInfo": "2. Enter the 'Message Receive URL' below into the 'URL' field",
		"enterpriseWeChatPowerInfo": "3. In the Enterprise WeChat application, find 'Permission Management' and enable the following permissions:",
		"inputEnterpriseWeChatCorpIdPlaceholder": "Enter Enterprise WeChat CorpID",
		"inputEnterpriseWeChatCorpSecretPlaceholder": "Enter Enterprise WeChat Application CorpSecret",
		"inputEnterpriseWeChatAgentIdPlaceholder": "Enter Enterprise WeChat Application AgentID",
		"inputEnterpriseWeChatTokenPlaceholder": "Enter Enterprise WeChat Application Token",
		"inputEnterpriseWeChatAesKeyPlaceholder": "Enter Enterprise WeChat Application EncodingAESKey",
		"enterpriseWeChatSettingsSuccess": "Enterprise WeChat configuration completed",
		"enterpriseWeChatLimitTips": "Due to the limitations of Enterprise WeChat itself, the following may occur:",
		"enterpriseWeChatChatTips": "1. AI Assistant conversations only support one-on-one conversations, and do not support group conversations",
		"enterpriseWeChatRichTextTips": "2. Rich text messages such as images/videos may render unexpectedly",
		"enterpriseWeChatLengthTips": "3. Message length exceeding 2048 characters will be truncated",
		"notices": "Notices: ",
		"corpId": "CorpID",
		"corpSecret": "CorpSecret",
		"token": "Token",
		"aesKey": "EncodingAESKey",
		"corpIdDesc": "CorpID can be obtained from \"Enterprise WeChat Management Backend - My Enterprise - Enterprise Information\"",
		"corpSecretDesc": "Application Secret can be obtained from \"Enterprise WeChat Management Backend - Application Management - Application Details\"",
		"tokenDesc": "Token can be obtained from \"Enterprise WeChat Management Backend - Application Management - Application Details - Receive Messages - Set API Receiving\"",
		"aesKeyDesc": "EncodingAESKey can be obtained from \"Enterprise WeChat Management Backend - Application Management - Application Details - Receive Messages - Set API Receiving\"",
		"documentCount": "{{num}} documents",
		"wordCount": "{{num}} words",
		"supported": "Supported",
		"fileSizeLimit": "Each file cannot exceed {{size}}",
		"fileDragTip": "Drag files here or click to select files",
		"uploadFile": "Upload File"
	},
	"knowledgeDatabase": {
		"name": "Knowledge Base",
		"mine": "My Knowledge Base",
		"add": "Add Knowledge Base",
		"update": "Update Knowledge Base",
		"deleteKnowledge": "Delete Knowledge Base",
		"deleteFile": "Delete File",
		"namePlaceholder": "Enter Knowledge Base Name",
		"descPlaceholder": "Enter Knowledge Base Description",
		"deleteSuccess": "Knowledge Base Deleted Successfully",
		"addSuccess": "Knowledge Base Added Successfully",
		"addFragment": "Add Fragment",
		"fragmentContent": "Fragment Content",
		"fragmentContentPlaceholder": "Enter Fragment Content",
		"businessIdDesc": "Specify Business ID in the workflow 'Vector Storage Node' to update this fragment",
		"updateFragment": "Update Fragment",
		"deleteFragment": "Delete Fragment",
		"deleteFragmentSuccess": "Fragment Deleted Successfully",
		"deleteDesc": "Deletion is irreversible. Confirm deletion?",
		"click2TargetKnowledge": "Click to go to Knowledge Base Details",
		"onlySupportJpgPng": "Only supports JPG/PNG format images",
		"imageSizeLimit": "Image size cannot exceed {{size}}",
		"fileSizeLimit": "File size cannot exceed {{size}}",
		"unsupportedFileType": "Unsupported file type: {{type}}",
		"uploadFail": "Upload failed",
		"uploadRetry": "Upload failed,",
		"uploadRetryText": "Click to retry",
		"createVectorKnowledge": "Create Vector Knowledge Base",
		"createVectorKnowledgeTip": "Are you sure to create a vector knowledge base?",
		"icon": "Icon",
		"uploadNewIcon": "Upload New Icon",
		"iconPlaceholder": "Upload Icon",
		"iconFileLimit": "Size must be no less than 128*128 pixels, format supports JPG/PNG, maximum 200 KB",
		"knowledgeName": "Knowledge Base Name",
		"description": "Description",
		"descriptionPlaceholder": "Enter Description",
		"previousStep": "Previous Step",
		"nextStep": "Next Step",
		"setting": "Setting",
		"savedSuccess": "Saved Successfully",
		"descLabel": "Description",
		"documentTitle": "Document",
		"documentDesc": "All files in the knowledge base can be indexed by AI Assistant/Sub Process/Tool",
		"search": "Search",
		"batchOperation": "Batch Operation",
		"addDocument": "Add Document",
		"delete": "Delete",
		"wordCount": "Word Count",
		"createTime": "Create Time",
		"status": "Status",
		"operation": "Operation",
		"syncStatus": {
			"pending": "Pending",
			"processing": "Processing",
			"available": "Available",
			"failed": "Failed",
			"disabled": "Disabled"
		},
		"createdSuccess": "Created Successfully",
		"viewKnowledge": "View Knowledge Base",
		"vectoringCompleted": "Vectoring Completed",
		"vectoringProcessing": "Vectoring Processing...",
		"noDocuments": "No Documents",
		"resetSuccess": "Reset Successfully",
		"deleteDocument": "Delete Document",
		"confirmDeleteDocument": "Confirm Delete Document: {{name}}?",
		"confirmBatchDelete": "Confirm Delete {{count}} Documents?",
		"selectDocumentTip": "Please select the document to operate",
		"updateKnowledge": "Update Vector Knowledge Base",
		"deleteDocumentSuccess": "Document Deleted Successfully",
		"uploadSuccess": "Upload Successfully",
		"uploadDocumentSuccess": "Upload Success: {{name}}",
		"enableDocument": "Enable Document",
		"disableDocument": "Disable Document",
		"confirmEnableDocument": "Confirm Enable Document: {{name}}?",
		"confirmDisableDocument": "Confirm Disable Document: {{name}}?",
		"fileEnableSuccess": "{{name}} has been enabled",
		"fileDisableSuccess": "{{name}} has been disabled",
		"confirmBatchEnable": "Confirm Enable {{count}} Documents?",
		"confirmBatchDisable": "Confirm Disable {{count}} Documents?",
		"enableDocumentsSuccess": "Successfully Enabled {{count}} Documents",
		"disableDocumentsSuccess": "Successfully Disabled {{count}} Documents",
		"deleteDocumentsSuccess": "Successfully Deleted {{count}} Documents",
		"batchOperationPartialFailed": "{{count}} documents operation failed",
		"rename": "Rename",
		"documentName": "Document Name",
		"inputDocumentNamePlaceholder": "Please enter document name",
		"renameDocumentSuccess": "Rename Success: {{name}}",
		"segmentSettings": "Segment Settings",
		"generalPattern": "General Pattern",
		"generalPatternDesc": "General text block mode, the block for retrieval and recall is the same",
		"segmentDelimiter": "Segment Delimiter",
		"segmentDelimiterDesc": "The delimiter is the character used to separate text. \\n\\n and \\n are commonly used delimiters for separating paragraphs and lines, you can also use custom special delimiters (e.g. ***)",
		"segmentMaxSize": "Segment Max Size",
		"segmentOverlapSize": "Segment Overlap Size",
		"segmentOverlapSizeDesc": "Setting the overlap size between segments can preserve the semantic relationship between segments, improving the recall effect. It is recommended to set it to 10% - 25% of the maximum segment length",
		"segmentPreprocessRules": "Segment Preprocess Rules",
		"segmentPreprocessReplaceRule": "Replace continuous spaces, line breaks, and tabs",
		"segmentPreprocessDeleteRule": "Delete all URLs and email addresses",
		"segmentPreview": "Segment Preview",
		"parentChildSegment": "Parent-Child Segment",
		"parentChildSegmentDesc": "When using the parent-child mode, the child block is used for retrieval, and the parent block is used as the context",
		"embeddingModel": "Embedding Model",
		"parentContext": "Parent Block as Context",
		"childContext": "Child Block for Search",
		"paragraph": "Paragraph",
		"paragraphDesc": "This mode splits text into paragraphs based on the delimiter and maximum block length, using the split text as the parent block for retrieval",
		"fullText": "Full Text",
		"fullTextDesc": "The entire document is used as the parent block and retrieved directly. Note that due to performance reasons, text exceeding 10000 tokens will be automatically truncated.",
		"searchSettings": "Search Settings",
		"searchSettingsDesc": "About the retrieval method, you can change this setting at any time in the knowledge base settings.",
		"vectorSearch": "Vector Search",
		"vectorSearchDesc": "Generate a query embedding and query the text segment most similar to its vector representation",
		"rerankModel": "Rerank Model",
		"rerankModelPlaceholder": "Please select a Rerank model",
		"rerankModelDesc": "Reranking model will reorder the candidate document list based on the semantic matching degree to the user's question, thereby improving the result of semantic sorting",
		"topKDesc": "Used to filter the text segment with the highest similarity to the user's question. The system will dynamically adjust the number of segments according to the context window size of the selected model",
		"scoreThreshold": "Score Threshold",
		"scoreThresholdDesc": "Used to set the similarity threshold for filtering text segments",
		"fullTextSearch": "Full Text Search",
		"fullTextSearchDesc": "Index all words in the document, allowing users to query any word and return text fragments containing these words",
		"hybridSearch": "Hybrid Search",
		"hybridSearchDesc": "Perform full text search and vector search simultaneously, and apply reranking steps to select the best result matching the user's question, users can set weights or configure reranking models.",
		"graphSearch": "Graph Search",
		"saveAndProcess": "Save and Process",
		"segmentMode": "Segment Mode",
		"recallTest": "Recall Test",
		"recallTestDesc": "Test the recall effect of knowledge based on the given query text.",
		"sourceText": "Source Text",
		"inputSourceTextPlaceholder": "Please enter the source text to test",
		"test": "Test",
		"testSuccess": "Test Success",
		"testFailed": "Test Failed",
		"recentTests": "Recent Tests",
		"testTime": "Test Time",
		"testText": "Test Text",
		"estimatedSegments": "Estimated Segments",
		"selectEmbeddingModel": "Please select an embedding model",
		"selectDocument": "Please select a document",
		"segmentPreviewLoading": "Document segmenting in progress, please wait...",
		"segmentPreviewFailed": "Segment preview failed",
		"segment": "Segment",
		"segmentWordCount": "{{num}} characters",
		"saveConfigFailed": "Failed to save configuration",
		"noResults": "No Results",
		"recallParagraphs": "{{num}} Recall Paragraphs",
		"recallTestLoading": "Recall in progress, please wait...",
		"segmentationMode": {
			"general": "Normal",
			"parentChild": "Parent-Child",
			"unknown": "Unknown"
		},
		"parentSegmentDelimiter": "Parent Segment Delimiter",
		"parentSegmentMaxSize": "Parent Segment Max Size",
		"childSegmentDelimiter": "Child Segment Delimiter",
		"childSegmentMaxSize": "Child Segment Max Size"
	},
	"start": {
		"name": "Start Node",
		"desc": "The process will start from this module when the following events are triggered",
		"addFriends": "When Added as Friend",
		"openWindows": "When Chat Window Opens",
		"openWindowsDesc": "Effective after how long since last opened",
		"newMessages": "When Receiving New Messages",
		"timeTrigger": "Time Trigger",
		"addTimeTrigger": "Add Time Trigger",
		"noRepeat": "No Repeat",
		"repeatDaily": "Repeat Daily",
		"repeatWeekly": "Repeat Weekly",
		"repeatMonthly": "Repeat Monthly",
		"nDay": "${num} Day",
		"repeatYearly": "Repeat Yearly",
		"repeatWorkday": "Repeat Every Workday",
		"repeatCustom": "Custom Repeat",
		"repeatFrequency": "Repeat Frequency",
		"per": "Every",
		"day": "Day",
		"week": "Week",
		"month": "Month",
		"year": "Year",
		"endTime": "End Time",
		"neverEnd": "Never End"
	},
	"reply": {
		"searchMessageType": "Search Message Type",
		"name": "Message Reply",
		"desc": "Reply or send a specified content to the user",
		"messageType": "Message Type",
		"messageContent": "Message Content",
		"messageContentPlaceholder": "Plain text message content,",
		"text": "Text",
		"image": "Image",
		"fileCard": "File Card"
	},
	"end": {
		"name": "End Node",
		"desc": "The final node of the process, used to return the result information after the workflow runs"
	},
	"waitForReply": {
		"name": "Wait",
		"desc": "The process will wait at this node for the user's next action",
		"whenReply": "When User Replies",
		"timeout": "Timeout to Abort Waiting",
		"timeoutDesc": "When enabled, the process will terminate if the specified time is exceeded"
	},
	"branch": {
		"name": "Selector",
		"desc": "Connect multiple downstream branches. If the set conditions are met, run the 'corresponding' branch; otherwise, run the 'else' branch"
	},
	"code": {
		"name": "Code Execution",
		"desc": "Write code to process input variables and generate return values through output",
		"codeEditor": "Code Editor",
		"expression": "Expression",
		"checkToUseTemplate": "Do you use templates?",
		"useTemplateDesc": "When a code template is used, the current block of code is overwritten"
	},
	"http": {
		"name": "HTTP Request",
		"desc": "Send a request to an external HTTP service and get response data based on set parameters",
		"request": "Request Configuration",
		"requestMethod": "Request Method",
		"requestUrlPlaceholder": "Enter URL",
		"withoutBody": "This request has no Body",
		"curlImport": {
			"buttonText": "Import cURL",
			"modalTitle": "Import cURL Command",
			"placeholder": "For example: curl -X GET 'https://api.example.com/users?page=1' -H 'Authorization: Bearer token'",
			"pastePrompt": "Paste cURL command:",
			"supportInfo": "Supports parsing HTTP methods, URL, query parameters, headers and request body",
			"emptyError": "Please enter a cURL command",
			"parseError": "Failed to parse cURL command, please check the format",
			"importSuccess": "cURL command imported successfully",
			"cancel": "Cancel",
			"import": "Import",
			"nodeNotExist": "Current node does not exist"
		}
	},
	"sub": {
		"name": "Subprocess",
		"desc": "Assign part of the functional modules to subprocesses for orchestration to avoid the main process becoming too large",
		"selectFlow": "Select Flow",
		"invalidFlow": "Flow has been disabled or deleted"
	},
	"agent": {
		"name": "AI Assistant",
		"desc": "Delegate capabilities to other assistants"
	},
	"tools": {
		"name": "Tools",
		"desc": "Reusable tool processes, delegate part of the process functionality to tools",
		"selectTools": "Select Tools",
		"invalidTools": "Tool has been disabled or deleted",
		"mode": "Call Mode",
		"bigModelMode": "Big Model Call",
		"bigModelModeDesc": "Call tools through natural language prompts",
		"argsMode": "Argument Call",
		"argsModeDesc": "Call tools by configuring input arguments"
	},
	"searchMembers": {
		"name": "Member Search",
		"desc": "Find member information that meets the criteria. This node only supports viewing the members and related information visible to the interlocutor",
		"userName": "User Name",
		"userWorkNumber": "User Work Number",
		"userPosition": "User Position",
		"userPhone": "User Phone Number",
		"departmentName": "Department Name",
		"groupName": "Group Chat Name",
		"selectDepartment": "Select Department"
	},
	"loop": {
		"name": "Loop",
		"desc": "Used to repeatedly execute a series of tasks by setting loop times and logic",
		"arrayLoop": "Array Loop",
		"arrayLoopDesc": "Traverse sequentially based on the set array",
		"countLoop": "Count Loop",
		"setCount": "Set Count",
		"setCountDesc": "Decrement loop based on the set number",
		"conditionsLoop": "Condition Loop",
		"conditionsDesc": "Terminate the loop when the set condition is met",
		"maxLoopCount": "Max Loop Count",
		"maxLoopCountDesc": "Input number or reference number",
		"loopBody": "Loop Body",
		"loopBodyDesc": "User orchestrates the main logic of the loop",
		"loopNext": "Execute Next Step After Loop Ends",
		"loopStart": "Loop Start",
		"loopEnd": "Loop End",
		"loopEndDesc": "Used to immediately terminate the current loop and exit the loop body"
	},
	"knowledgeSearch": {
		"name": "Knowledge Search",
		"desc": "Perform a knowledge search on the input keywords and return matching related content",
		"keywordDesc": "Match in specified knowledge base using keywords,"
	},
	"text2Image": {
		"name": "Image Generation",
		"desc": "Generate images through text descriptions",
		"size": "Size Ratio",
		"referenceImage": "Reference Image",
		"mjDesc": "Midjourney model generates 4 images each time",
		"positivePrompt": "Positive Prompt",
		"positivePromptDesc": "Positive prompt for image generation,",
		"negativePrompt": "Negative Prompt",
		"negativePromptDesc": "Negative prompt for image generation, used to describe content forbidden in the artwork. Supports adding variables with \"@\" (system default appends reverse prompts: nsfw, nude, blurry, watermark, identifying mark, low resolution, mutated, lack of hierarchy)",
		"enableSR": "Enable Super Resolution",
		"enableSRDesc": "Default max width and height is 512. Enabling super resolution supports 1024, but image generation time will be delayed",
		"fluxDesc": "Available Width x Height: 1024x1024, 1024x1792, 1792x1024"
	},
	"groupChat": {
		"name": "Create Group Chat",
		"desc": "Create a group chat with specified members",
		"groupSettings": "Group Chat Settings",
		"groupName": "Group Chat Name",
		"groupOwner": "Group Owner",
		"groupMembers": "Group Members",
		"groupType": "Group Type",
		"internalGroup": "Internal Group",
		"workUnitGroup": "Work Unit Group",
		"trainingGroup": "Training Group",
		"meetingGroup": "Meeting Group",
		"projectGroup": "Project Group",
		"externalGroup": "External Group",
		"addCurrentUser": "Add Current User to Group Chat",
		"addCurrentAgent": "Add Current Assistant to Group Chat"
	},
	"llm": {
		"name": "Big Model Call",
		"desc": "Call large language models, generate replies using variables and prompts",
		"systemPromptPlaceholder": "Fixed guide words for the big model, guide the chat direction by adjusting the content. Prompt content will be fixed at the beginning of the context,",
		"userPromptPlaceholder": "Fixed guide words for the big model, guide the chat direction by adjusting the content. Prompt content will be fixed at the beginning of the context,",
		"loadMemory": "Load Memory",
		"visibleUnderstanding": "Visual Understanding",
		"selectVisibleModel": "Select Visual Model",
		"visibleUnderstandingTip": "Models without visual understanding can enhance their capabilities by mounting models with visual understanding; models with visual understanding capabilities can disable this feature"
	},
	"intentionRecognize": {
		"name": "Intention Recognition",
		"desc": "The big model recognizes the actual intention of the content based on the input",
		"intention": "Intention",
		"intentionName": "Intention Name",
		"intentionNamePlaceholder": "Enter Name",
		"intentionDesc": "Intention Description",
		"intentionDescPlaceholder": "Enter intention content here,",
		"addIntention": "Add Intention",
		"otherIntention": "Other Intention",
		"otherIntentionDesc": "Run this path when no result is matched in intention recognition"
	},
	"historyMessage": {
		"name": "History Message",
		"desc": "Used to store or query historical messages"
	},
	"messageSearch": {
		"name": "History Message Search",
		"desc": "Query historical messages based on specified conditions",
		"maxRecordCount": "Max Record Count",
		"range": "Time Range Filter"
	},
	"messageMemory": {
		"name": "History Message Storage",
		"desc": "Custom memory storage, freely choose to store any content"
	},
	"vectorDatabase": {
		"name": "Vector Knowledge Base",
		"desc": "Supports matching or storing fragment content in the vector knowledge base"
	},
	"vectorStorage": {
		"name": "Vector Storage",
		"desc": "Store as fragments in the knowledge base",
		"saveFragment": "Save Fragment",
		"saveFragmentPlaceholder": "Content of the fragment to be stored,"
	},
	"vectorSearch": {
		"name": "Vector Search",
		"desc": "Perform similarity matching in multiple knowledge bases from top to bottom, matching fragments with specified similarity and quantity"
	},
	"vectorDelete": {
		"name": "Vector Delete",
		"desc": "Perform similarity matching in multiple knowledge bases from top to bottom, matching fragments with specified similarity and quantity"
	},
	"vectorDatabaseMatch": {
		"name": "Vector Knowledge Base Match",
		"desc": "Match related vector knowledge bases through query conditions",
		"vectorDatabaseId": "Knowledge Base ID",
		"vectorDatabaseName": "Knowledge Base Name"
	},
	"cache": {
		"name": "Persistent Database",
		"desc": "Used for persistent storage or data loading"
	},
	"cacheGetter": {
		"name": "Data Loading",
		"desc": "Read persistent data",
		"keyPlaceholder": "Enter the key of the data to read"
	},
	"cacheSetter": {
		"name": "Data Storage",
		"desc": "Store persistent data",
		"timeout": "Data Expiry Time (seconds)",
		"timeoutPlaceholder": "Enter the expiry time of the data to store, -1 for never expire,",
		"keyPlaceholder": "Enter the key of the data to store",
		"valuePlaceholder": "Enter the value of the data to store"
	},
	"variable": {
		"name": "Variable",
		"desc": "Used to store, update, and delete variables in the process, deletion not yet supported"
	},
	"variableSave": {
		"name": "Variable Save",
		"desc": "Update the variable if it exists, add the variable if it doesn't"
	},
	"magicTable": {
		"name": "Magic Table",
		"desc": "Used to perform CRUD operations on the specified magic table"
	},
	"addRecord": {
		"name": "Add Record",
		"desc": "Add a record to the specified data table"
	},
	"updateRecord": {
		"name": "Update Record",
		"desc": "Update records in the specified data table"
	},
	"findRecord": {
		"name": "Find Record",
		"desc": "Query row records in the data table based on specified conditions"
	},
	"deleteRecord": {
		"name": "Delete Record",
		"desc": "Delete row records in the data table based on specified conditions"
	},
	"file": {
		"name": "File Related",
		"desc": "Node for processing file data"
	},
	"loader": {
		"name": "Document Parsing",
		"desc": "Extract text content from the file and output it as text to the next node"
	},
	"excel": {
		"name": "Spreadsheet Parsing",
		"desc": "Extract text content from the file and output it as text to the next node"
	},
	"text": {
		"name": "Text Related",
		"desc": "Node for processing text"
	},
	"textSplit": {
		"name": "Text Splitting",
		"desc": "Split long text according to predetermined strategies, strategy selection will be open in the future",
		"splitContent": "Content to Split",
		"splitContentPlaceholder": "Enter the text to split,"
	},
	"documentResolve": {
		"name": "Cloud Doc Parsing",
		"desc": "The node outputs the content of the specified cloud document in a Markdown structure",
		"selectFile": "Select file"
	},
	"flowInstructions": {
		"name": "Flow Instructions",
		"desc": "Flow instruction configuration",
		"flowInstructions": "Flow Instructions",
		"instructionName": "Instruction Name",
		"instructionValue": "Instruction Value",
		"instructionStatus": "Instruction Status",
		"switchInstructionName": "Switch Instruction Name",
		"switchInstructionValue": "Switch Instruction Value",
		"singleChoiceInstructionName": "Single Choice Instruction Name",
		"singleChoiceInstructionValue": "Single Choice Instruction Value"
	},
	"flowAssistant": {
		"title": "Flow Assistant",
		"welcome": "Hello! I'm your Flow Assistant and can help you create flows using natural language.\n\nYou can tell me to:\n- Create a flow with specific functionality\n- Add, delete, or modify nodes\n- Connect or disconnect nodes\n- Save or publish your flow\n\nJust describe what you want to achieve and I'll help you build it!",
		"inputPlaceholder": "Enter your request or instruction...",
		"error": "Sorry, I couldn't process this request. Please try describing your needs again or provide more details.",
		"processError": "Error processing instruction",
		"publishSuccess": "Flow published successfully",
		"publishError": "Failed to publish flow",
		"processingCommands": "Collecting instruction data...",
		"commandCompleted": "Command execution completed"
	}
}
