import React, { useMemo } from "react"
import { FlowContext, FlowCtx } from "./Context"

export const FlowProvider = ({
	flow,
	edges,
	onEdgesChange,
	onConnect,
	updateFlow,
	nodeConfig,
	setNodeConfig,
	updateNodeConfig,
	addNode,
	deleteNodes,
	deleteEdges,
	updateNodesPosition,
	selectedNodeId,
	setSelectedNodeId,
	triggerNode,
	selectedEdgeId,
	setSelectedEdgeId,
	setEdges,
	updateNextNodeIdsByDeleteEdge,
	updateNextNodeIdsByConnect,
	description,
	flowInstance,
	debuggerMode,
	getNewNodeIndex,
	showMaterialPanel,
	setShowMaterialPanel,
	flowDesignListener,
	notifyNodeChange,
	children,
}: FlowCtx) => {
	const value = useMemo(() => {
		return {
			flow,
			edges,
			onEdgesChange,
			onConnect,
			updateFlow,
			nodeConfig,
			setNodeConfig,
			updateNodeConfig,
			addNode,
			deleteNodes,
			deleteEdges,
			updateNodesPosition,
			selectedNodeId,
			setSelectedNodeId,
			triggerNode,
			selectedEdgeId,
			setSelectedEdgeId,
			setEdges,
			updateNextNodeIdsByDeleteEdge,
			updateNextNodeIdsByConnect,
			description,
			flowInstance,
			debuggerMode,
			getNewNodeIndex,
			showMaterialPanel,
			setShowMaterialPanel,
			flowDesignListener,
			notifyNodeChange,
		}
	}, [
		flow,
		edges,
		onEdgesChange,
		onConnect,
		updateFlow,
		nodeConfig,
		setNodeConfig,
		updateNodeConfig,
		addNode,
		deleteNodes,
		deleteEdges,
		updateNodesPosition,
		selectedNodeId,
		setSelectedNodeId,
		triggerNode,
		setEdges,
		selectedEdgeId,
		setSelectedEdgeId,
		updateNextNodeIdsByDeleteEdge,
		description,
		flowInstance,
		updateNextNodeIdsByConnect,
		debuggerMode,
		getNewNodeIndex,
		showMaterialPanel,
		setShowMaterialPanel,
		flowDesignListener,
		notifyNodeChange,
	])

	return <FlowContext.Provider value={value}>{children}</FlowContext.Provider>
}
